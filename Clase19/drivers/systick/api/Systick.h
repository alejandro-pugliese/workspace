/*********************************************************************************************************
*
* @file		Systick.h
* @brief	Módulo para manejo de Temporizaciones.
* @version	1.00
* @date		XX/XX/XXXX
* @author	Daniel J. López Amado (DJLA)
*
*
*********************************************************************************************************
*** REVISION HISTORY
*
********************************************************************************************************/
/********************************************************************************************************
*** MODULE
********************************************************************************************************/
#ifndef SYSTICK_H_
#define SYSTICK_H_


/********************************************************************************************************
*** INCLUDES
********************************************************************************************************/
#include "My_Types.h"
#include "stdint.h"
#include "Systick_cfg.h"

/********************************************************************************************************
*** DEFINES
********************************************************************************************************/

/********************************************************************************************************
*** MACROS
********************************************************************************************************/

/********************************************************************************************************
*** DATA TYPES
********************************************************************************************************/
typedef uint32_t 	tiempo;

typedef enum
{
	PERIODIC=0,
	SINGLE_SHOT,
	TIMER_TYPES_NUM_MAX,
}timer_types;

typedef enum
{
	#undef TIMER
	#define TIMER(nombre, id, tipo, valor, autorecarga, autoarranque, handler) id,
	TABLA_TIMERS
	#undef TIMER
	TIMERS_MAX_NUM,

}timer_id;

typedef struct
{
	const char* nombre;				/*Nombre descriptivo del timer, proposito de debug*/
	timer_id	id;					/*Identificador para el desarrollador e interno del timer*/
	timer_types tipo;				/*Configura si el timer es periodico o utiliza un timer*/
	tiempo		valor;				/*Valor expresado en unidades de la variable TMR_TICK expresada en milisegundos*/
	tiempo		autorecarga;
	bool_t		autostart;			/*Configura si una vez arrancado el systick debe comenzar a trabajar el timer*/
	void 		(*handler) (void);	/*Handler a configurar sera llamado para consumir el evento.*/
	bool_t		flag_evento;		/*Flag utilizado para marcar que hay un evento no consumido*/
}Timer_Systick_Type;

/********************************************************************************************************
*** PUBLIC GLOBAL VARIABLES
********************************************************************************************************/

/********************************************************************************************************
*** PUBLIC FUNCTION PROTOTYPES
********************************************************************************************************/

/********************************************************************************************************
 * @fn
 * @brief
 *
 * @param[in]
 * @return
********************************************************************************************************/
void 	TIMER_Systick_Init(void);

/********************************************************************************************************
 * @fn
 * @brief
 *
 * @param[in]
 * @return
********************************************************************************************************/
bool_t 	TIMER_Start(timer_id id, tiempo valor, timer_types tipo ,void (*handler)(void));

/********************************************************************************************************
 * @fn
 * @brief
 *
 * @param[in]
 * @return
********************************************************************************************************/
bool_t 	TIMER_Stop(timer_id id);

/********************************************************************************************************
 * @fn
 * @brief
 *
 * @param[in]
 * @return
********************************************************************************************************/
bool_t 	TIMER_Get_Event(timer_id id);

/********************************************************************************************************
*** MODULE END
********************************************************************************************************/

#endif
