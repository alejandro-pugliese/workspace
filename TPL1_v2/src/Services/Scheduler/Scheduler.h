/*******************************************************************************************************************************//**
 *
 * @file		Scheduler.h
 * @brief		Módulo para el manejo de tareas periodicas. Esquema simplificado de un gestor de tareas.
 * @date		31/05/2016
 * @author		Daniel J. López Amado <dlopezamado@hotmail.com>
 *
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** MODULO
 **********************************************************************************************************************************/
#ifndef SCHEDULER_H_
#define SCHEDULER_H_

/***********************************************************************************************************************************
 *** INCLUDES
 **********************************************************************************************************************************/
#include "MyTypes.h"

/***********************************************************************************************************************************
 *** DEFINES
 **********************************************************************************************************************************/
/* Cantidad de Tareas que maneja el Módulo */
#define MAX_TASKS	(10)	/* Configurar segun la aplicacion */

/***********************************************************************************************************************************
 *** MACROS
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** TIPO DE DATOS PUBLICOS
 **********************************************************************************************************************************/
typedef void (*TaskHandler_t)(void);	/* Las tareas que maneja el modulo deben ser del tipo: void Task(void) */

/***********************************************************************************************************************************
 *** VARIABLES GLOBALES (extern)
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** PROTOTIPOS DE FUNCIONES
 **********************************************************************************************************************************/
/*******************************************************************************************************************************//**
 * @fn			void Scheduler_Init(uint32_t time_ms)
 * @brief		Inicializa el Scheduler.
 * @param[in]	time_ms:	Periodo de acutualizacion del Scheduler expresado en milisegundos.
 * @return		void
 **********************************************************************************************************************************/
void Scheduler_Init(uint32_t time_ms);

/*******************************************************************************************************************************//**
 * @fn			uint32_t Scheduler_AddTask(TaskHandler_t taskHandler, uint32_t period)
 * @brief		Agrega una tarea.
 * @param[in]	taskHandler: Direccion de memoria de la tarea a ejecutar periodicamente. Debe ser del tipo: void Task(void)
 * @param[in]	period: 	 Periodo en el que se ejecuta la tarea (Expresado en veces del valor configurado en Scheduler_Init())
 * @return		Id de la tarea. Debe ser un numero de 0 a (MAX_TASKS-1). Si retorna MAX_TASKS la tarea no pudo ser agregada
 **********************************************************************************************************************************/
uint32_t Scheduler_AddTask(TaskHandler_t taskHandler, uint32_t period);

/*******************************************************************************************************************************//**
 * @fn			void Scheduler_Start(void)
 * @brief		Comienza a funcionar el Scheduler. Debe ser invocada luego de agregar todas las tareas mediante Scheduler_AddTask()
 * @param	    void
 * @return		void
 **********************************************************************************************************************************/
void Scheduler_Start(void);

/*******************************************************************************************************************************//**
 * @fn			void Scheduler_Dispatcher(void)
 * @brief		Debe ser llamada en el lazo principal, con una frecuecia igual o mayor al periodo configurado en Scheduler_Init()
 * @param	    void
 * @return		void
 **********************************************************************************************************************************/
void Scheduler_Dispatcher(void);

/***********************************************************************************************************************************
 *** FIN DEL MODULO
 **********************************************************************************************************************************/

#endif /* SCHEDULER_H_ */


